
#include <algorithm>
#include <cstring>
#include <fstream>
#include <iostream>

static void help(const char* binname)
{
    std::cout << "\n" << binname << " [options]\n";
    std::cout << "\n";
    std::cout << "Generate kconfig.h from a config.mk file\n";
    std::cout << "\n";
    std::cout << "options:\n";
    std::cout << "  --input, -i        Config file\n";
    std::cout << "  --output, -o       Output kconfig.h\n";
    std::cout << "  --help, -h         Print this message and exit\n";
    std::cout << "\n";
}

int main(int argc, char** argv)
{
    if (argc == 1)
    {
        help(argv[0]);
        exit(1);
    }

    std::string input_path;
    std::string output_path;

    for (size_t i = 1; i < argc; ++i)
    {
        if (!strcmp(argv[i], "--input") || !strcmp(argv[i], "-i"))
        {
            if (i + 1 == argc)
            {
                help(argv[0]);
                std::cout << "--input, -i requires second argument.\n";
                return 1;
            }

            input_path = std::string(argv[i + 1]);
        }
        else if (!strcmp(argv[i], "--output") || !strcmp(argv[i], "-o"))
        {
            if (i + 1 == argc)
            {
                help(argv[0]);
                std::cout << "--output, -o requires second argument.\n";
                return 1;
            }

            output_path = std::string(argv[i + 1]);
        }
        else if (!strcmp(argv[i], "--help") || !strcmp(argv[i], "-h"))
        {
            help(argv[0]);
            return 0;
        }
    }

    if (input_path == "")
    {
        help(argv[0]);
        std::cout << "--input, -i is required.\n";
        return 1;
    }

    if (output_path == "")
    {
        help(argv[0]);
        std::cout << "--output, -o is required.\n";
        return 1;
    }

    std::ifstream ifs(input_path);
    if (!ifs.is_open())
    {
        std::cout << "Couldn't open \"" << input_path << "\" for reading!\n";
        return -1;
    }

    std::ofstream ofs(output_path);
    if (!ofs.is_open())
    {
        std::cout << "Couldn't open \"" << output_path << "\" for writing!\n";
        return -1;
    }

    ofs << "/* This file was auto-generated by the kconfig_h_generator tool */\n\n";
    ofs << "#ifndef _DXGMX_AUTOGENERATED_KCONFIG_H\n";
    ofs << "#define _DXGMX_AUTOGENERATED_KCONFIG_H\n\n";

    std::string line;
    size_t line_num = 1;
    while (std::getline(ifs, line))
    {
        line.erase(
            std::remove_if(line.begin(), line.end(), isspace), line.end());

        if (!line.size() || line[0] == '#')
            continue;

        size_t eq = line.find('=');
        if (eq == line.npos)
        {
            ofs.close();
            ofs.open(output_path);
            std::cout << "Found bad option at line " << 4 + line_num << "!\n";
            return -1;
        }

        std::string key = line.substr(0, eq);
        std::string value = line.substr(eq + 1);
        if (!key.size())
        {
            ofs.close();
            ofs.open(output_path);
            std::cout << "Found bad key at line" << 4 + line_num << "!\n";
            return -1;
        }

        if (!value.size())
        {
            ofs.close();
            ofs.open(output_path);
            std::cout << "Found bad value for key " << key << ".\n";
            return -1;
        }

        if (value == "y")
            ofs << "#define " << key << '\n';
        else
            ofs << "#define " << key << ' ' << value << '\n';

        ++line_num;
    }

    ofs << "\n#endif // !_DXGMX_AUTOGENERATED_KCONFIG_H\n";
    return 0;
}
