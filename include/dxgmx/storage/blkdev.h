/**
 * Copyright 2023 Alexandru Olaru.
 * Distributed under the MIT license.
 */

#ifndef _DXGMX_STORAGE_BLKDEV_H
#define _DXGMX_STORAGE_BLKDEV_H

/**
 * A BlockDevice is the generic API of a storage device. A MountableBlockDevice
 * is a BlockDevice that can be mounted. BlockDevices are registered by a
 * driver, while MountableBlockDevices are generated by blkdevm at the request
 * of a driver (by parsing the partition table and what not, of a BlockDevice).
 * There's technically nothing stopping you from 'mounting' a BlockDevice (using
 * it as the device for a filesystem driver), but most drivers work with
 * partitioned block devices.
 */

#include <dxgmx/storage/types.h>
#include <dxgmx/types.h>

typedef struct S_BlockDevice
{
    /* The name of the block device. (For PATA devices it will be hdX, for SATA
     * sdX) */
    char* name;

    /* The type of block device. (For example "pata" for PATA devices). */
    char* type;

    u16 sectorsize;

    char* uuid;

    /* How many sectors this block device has. */
    sectorcnt_t sector_count;

    ssize_t (*read)(
        const struct S_BlockDevice* blkdev,
        lba_t lba,
        sectorcnt_t n,
        void* dest);

    ssize_t (*write)(
        const struct S_BlockDevice* blkdev,
        lba_t lba,
        sectorcnt_t n,
        const void* src);

    /* Points to extra info created by the device driver. */
    void* extra;
} BlockDevice;

/* FIXME: Just a thing I've thought about, if the vfs mounts a
 * MountableBlockDevice, and while mounted, the physical device for that block
 * device is removed, the vfs has now way to know that. I think we can fix this
 * with a refcount of sorts, and a flag. When trying to read/write to a
 * MountableBlockDevice, that read/write function will check if the underlying
 * device has been removed. If it has it will signal that to the caller, and
 * then it can decrease the refcount once it's unmounted that partition (or
 * something). Not really a problem for us yet, since we don't have removable
 * media. */
typedef struct S_MountableBlockDevice
{
    /* Suffix to be appended to parent's name */
    char* suffix;
    /* Offset from the parent's starting LBA */
    lba_t offset;
    /* UUID for this device. */
    char* uuid;
    /* Sector count of this device */
    sectorcnt_t sector_count;
    /* Size of one sector for this device. The same as parent->sectorsize. */
    size_t sectorsize;

    ssize_t (*read)(
        const struct S_MountableBlockDevice* blkdev,
        lba_t lba,
        sectorcnt_t n,
        void* dest);

    ssize_t (*write)(
        const struct S_MountableBlockDevice* blkdev,
        lba_t lba,
        sectorcnt_t n,
        const void* src);

    const BlockDevice* parent;
} MountableBlockDevice;

#endif // !_DXGMX_STORAGE_BLKDEV_H
